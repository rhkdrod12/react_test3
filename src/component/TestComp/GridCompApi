//**************************************************************************//
GridInfo = {
  /**************************
   * 그리드 전체에 적용할 setup
   * ........
   * 여기에
   ***************************/
  Column: [{}, { ...value, css: {} }], //<- 해당값은 headerinfo, dataInfo에 둘다 적용되도록
  HeaderInfo: {},
  DataInfo: {},
  FooterInfo: {},
};

//css 적용은 헤당 row와 column에 직접적으로 css에 적는 것으로 처리
HeaderInfo = {
  /**************************
   * 헤더 전체에 적용할 setup
   * ........
   ***************************/
  // 헤더 로우에 적용할 setup
  HeaderRow: { ...value, css: {} },
  // 헤더 컬럼에 적용할 setup
  HeaderColumn: [{}, { ...value, css: {} }],
};

DataInfo = {
  /**************************
   * 데이터 전체에 적용할 setup
   * ........
   ***************************/
  // 데이터 로우에 적용할 setup
  DataRow: { ...value, css: {} },
  // 데이터 컬럼에 적용할 setup
  DataColumn: [{}, { ...value, css: {} }],
};

// 위와 동일
FooterInfo;
FooterRow;
FooterColumn;

// 그리드를 만들 데이터
Data = [];

//**************************************************************************//
// 헤더에 적용시킬 setup
HeaderInfo = {
  // 컬럼 식별자
  field: "",
  // 헤더 이름
  headerName: "",
  // 컬럼 길이
  width: "250px",
  // 컬럼 높이
  height: "24px",
  // 헤더 컬럼에 적용시킬 사용자 이벤트
  event: {},
};

// 로우 전체에 적용시킬 setup
RowInfo = {
  // 로우 높이
  height: "24px",
  // 읽기전용 여부
  readOnly: false,
  // 비활성화 여부
  disable: false,
  // 로우에 적용시킬 사용자 이벤트
  //-> 해당 이벤트에는 rowIdx, rowData, RowInfo를 setup으로 넣음
  event: {},
};

// 컬럼 전체에 적용시킬 setup
ColumnInfo = {
  // 컬럼 식별자
  field: "",
  // 기본값
  defaultValue: "",
  // 읽기전용 여부
  readOnly: false,
  // 비활성화 여부
  disable: false,
  // 컬럼에 적용시킬 사용자 이벤트
  //-> 해당 이벤트에는 rowIdx, rowData, RowInfo, columnData, ColumnInfo를 setup으로 넣음
  event: {},
  // 헤더에 선언되어있으면 헤더값을 가져오는 것으로 함
  width: "250px",
};

/**
 * 스크롤 처리
 * Y-축 스크롤은 헤더를 포함시켜서 오른쪽에 가상의 스크롤 구조로 생성시킴
 * x-축 스크롤은 헤더를 포함시켜서 하단쪽에 가상의 스크롤 구조로 생성시킴
 **/

/**
 * 컴포넌트 매개변수는 대문자로
 * 함수 파라미터는 소문자로 !!! 땅땅땅!
 *
 * 설정 관련 파라미터들은 대문자!
 */
